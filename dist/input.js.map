{"version":3,"sources":["../node_modules/@directus/extension-toolkit/mixins/interface.js","input.vue"],"names":[],"mappings":";AAAA,OAAA,QAAA,CACA,MAAA,CAIA,GAAA,CACA,KAAA,OACA,UAAA,GAGA,KAAA,CACA,KAAA,OACA,UAAA,GAIA,MAAA,CACA,KAAA,KACA,QAAA,MAGA,KAAA,CACA,KAAA,OACA,UAAA,GAGA,OAAA,CACA,KAAA,CAAA,OAAA,QACA,QAAA,MAGA,SAAA,CACA,KAAA,QACA,SAAA,GAGA,SAAA,CACA,KAAA,QACA,SAAA,GAGA,QAAA,CACA,KAAA,OACA,QAAA,KAAA,KAGA,QAAA,CACA,KAAA,QACA,SAAA,GAIA,SAAA,CACA,KAAA,OACA,QAAA,MAGA,OAAA,CACA,KAAA,OACA,QAAA,MAIA,OAAA,CACA,KAAA,OACA,QAAA;;AC1DA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAFA,IAAA,EAAA,EAAA,QAAA,iDAEA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,IAAA,EAAA,CACA,OAAA,CAAA,EAAA,SACA,QAAA,WAAA,IAAA,EAAA,KAEA,EAAA,KAAA,OAAA,OAEA,EAAA,SAAA,iBAAA,gBACA,EAAA,SAAA,cAAA,qBACA,EAAA,KAAA,aAGA,KAAA,QAAA,GAGA,KAAA,WAAA,EAAA,EAAA,OAEA,GACA,EAAA,iBAAA,SAAA,SAAA,GACA,IAAA,EAAA,EAAA,OAAA,MAGA,EAAA,QAAA,GAGA,EAAA,WAAA,EAAA,OAIA,QAAA,CACA,UAAA,SAAA,GACA,IAAA,EAAA,EAAA,OAAA,MACA,KAAA,MAAA,QAAA,IAEA,QAAA,SAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IACA,EAAA,GAAA,MAAA,QAAA,SAGA,QAAA,SAAA,GAIA,IAHA,IAAA,EAAA,KAAA,kBAAA,KAAA,QAAA,YAGA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,IAAA,EAAA,EAAA,GAAA,QAAA,OAEA,EAAA,WAAA,GAAA,OAAA,EAAA,OAAA,0BAAA,KACA,EAAA,GAAA,MAAA,QAAA,UAGA,WAAA,WAEA,IAAA,EAAA,KAAA,OAAA,OACA,EAAA,KAAA,kBAAA,KAAA,QAAA,YAGA,EAAA,GAaA,OAXA,OAAA,KAAA,GAAA,QAAA,SAAA,EAAA,GACA,GAAA,EAAA,WAAA,GAAA,OAAA,EAAA,OAAA,0BAAA,EAAA,CACA,IACA,EADA,EAAA,MAAA,KACA,GAEA,EAAA,KAAA,EAAA,GAAA,IAEA,EAAA,GAAA,KAAA,MAIA,GAEA,WAAA,SAAA,GACA,GAAA,EACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,IAAA,EAAA,SAAA,cAAA,eAAA,EAAA,GAAA,KAEA,IAAA,EAAA,MAAA,QAAA,WAIA,kBAAA,SAAA,GAEA,OAAA,EAAA,SAAA,KAAA,EAAA,UAAA,EAAA,EAAA,OAAA,GAAA,KAjFA,QAAA,QAAA","file":"input.js","sourceRoot":"../src","sourcesContent":["module.exports = {\n  props: {\n    // Unique id for this interface. Should be added to the lower level \n    // HTML input element if applicable. This ID will be used in the label's\n    // `for` attribute\n    id: {\n      type: String,\n      required: true\n    },\n    // Name of the field\n    name: {\n      type: String,\n      required: true\n    },\n    // The current value. This can either be the default value, the saved database\n    // value or the current state after the user made an edit\n    value: {\n      type: null,\n      default: null\n    },\n    // Type of the field, eg `string`, `hash`, or `array`\n    type: {\n      type: String,\n      required: true\n    },\n    // Max length\n    length: {\n      type: [String, Number],\n      default: null\n    },\n    // If the field is readonly or not\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    // If the field is required or not\n    required: {\n      type: Boolean,\n      default: false\n    },\n    // Field options. A json object based on the interface's meta.json file\n    options: {\n      type: Object,\n      default: () => ({})\n    },\n    // If the item that's currently being edited is new\n    newItem: {\n      type: Boolean,\n      default: false\n    },\n    // The relation of the current field. Will contain information on the related\n    // collection and field(s)\n    relation: {\n      type: Object,\n      default: null\n    },\n    // The other fields in the current edit page\n    fields: {\n      type: Object,\n      default: null\n    },\n    // The values of the other fields on the edit page. Can be used for things like\n    // automatically generating a slug based on another field\n    values: {\n      type: Object,\n      default: null\n    }\n  }\n};\n","<template>\n  <input @input=\"emitValue\" :value=\"value\" />\n</template>\n\n<script>\n  import mixin from \"@directus/extension-toolkit/mixins/interface\";\n\n  export default {\n    mixins: [mixin],\n    mounted() {\n      // Fetch block options\n      const { values } = this._props\n      \n      const fieldsNode = document.querySelectorAll('[data-field]');\n      const typeField = document.querySelector('[data-field=type]');\n      const options = this.getOptions();\n\n      // hide all fields until the user choose a type\n      this.hideAll(fieldsNode)\n\n      // Show the default value if present\n      this.showFields(options[values.type])\n\n      if (typeField) {\n        typeField.addEventListener('change', (e) => {\n          const value = e.target.value\n\n          // Hide all the fields on change\n          this.hideAll(fieldsNode)\n\n          // show fields from the options\n          this.showFields(options[value])\n        })\n      }\n    },\n    methods: {\n      emitValue(event) {\n        const value = event.target.value;\n        this.$emit(\"input\", value);\n      },\n      showAll(fieldsNode) {\n        for (let i = 0; i < fieldsNode.length; i++) {\n          fieldsNode[i].style.display = 'block'\n        }\n      },\n      hideAll(fieldsNode) {\n        const collectionName = this.getCollectionName(this.$parent.collection);\n\n        // Hide all the fields that start with the collection name + the conditional_interface\n        for (let i = 0; i < fieldsNode.length; i++) {\n          let field = fieldsNode[i].dataset.field\n\n          if (field.startsWith(`${collectionName}_`) || field === 'conditional_interface')\n            fieldsNode[i].style.display = 'none'\n        }\n      },\n      getOptions() {\n        // Fetch options\n        const { fields } = this._props\n        const collectionName = this.getCollectionName(this.$parent.collection);\n\n        // Build options\n        let options = [];\n\n        Object.keys(fields).forEach(( key, index ) => {\n          if (key.startsWith(`${collectionName}_`) && key !== \"conditional_interface\") {\n            const splitKeys = key.split(\"_\");\n            const type = splitKeys[1];\n\n            if (!options[type]) options[type] = []\n\n            options[type].push(key)\n          }\n        });\n\n        return options;\n      },\n      showFields(fieldsNode) {\n        if (fieldsNode) {\n          for (let i = 0; i < fieldsNode.length; i++) {\n            let field = document.querySelector('[data-field=' + fieldsNode[i] + ']');\n\n            if (field) field.style.display = 'block';\n          }\n        }\n      },\n      getCollectionName(collection) {\n        // If the collection name ends with an 's', we use the singular name\n        return collection.endsWith('s') ? collection.substring(0, collection.length - 1) : collection\n      }\n    }\n  }\n</script>\n\n<style lang=\"scss\" scoped>\ninput {\n  border-radius: var(--border-radius);\n}\n</style>\n"]}