{"version":3,"sources":["../node_modules/@directus/extension-toolkit/mixins/interface.js","input.vue"],"names":[],"mappings":";AAAA,OAAA,QAAA,CACA,MAAA,CAIA,GAAA,CACA,KAAA,OACA,UAAA,GAGA,KAAA,CACA,KAAA,OACA,UAAA,GAIA,MAAA,CACA,KAAA,KACA,QAAA,MAGA,KAAA,CACA,KAAA,OACA,UAAA,GAGA,OAAA,CACA,KAAA,CAAA,OAAA,QACA,QAAA,MAGA,SAAA,CACA,KAAA,QACA,SAAA,GAGA,SAAA,CACA,KAAA,QACA,SAAA,GAGA,QAAA,CACA,KAAA,OACA,QAAA,KAAA,KAGA,QAAA,CACA,KAAA,QACA,SAAA,GAIA,SAAA,CACA,KAAA,OACA,QAAA,MAGA,OAAA,CACA,KAAA,OACA,QAAA,MAIA,OAAA,CACA,KAAA,OACA,QAAA;;AC5DA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAFA,IAAA,EAAA,EAAA,QAAA,iDAEA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,IAAA,EAAA,CACA,OAAA,CAAA,EAAA,SACA,QAAA,WAAA,IAAA,EAAA,KAEA,EAAA,SAAA,iBAAA,gBACA,KAAA,4BAAA,GAEA,IAAA,EAAA,KAAA,OAAA,OACA,EAAA,KAAA,OAAA,QAAA,WAEA,EAAA,GAGA,OAAA,KAAA,GAAA,QAAA,SAAA,EAAA,GACA,IAAA,EAAA,SAAA,cAAA,eAAA,EAAA,KACA,EAAA,GACA,EAAA,GAGA,OAAA,KAAA,EAAA,IAAA,QAAA,SAAA,EAAA,GAIA,IAHA,IAAA,EAAA,GAGA,EAAA,EAAA,EAAA,EAAA,GAAA,GAAA,OAAA,IACA,EAAA,KAAA,EAAA,GAAA,GAAA,IACA,EAAA,KAAA,EAAA,GAAA,GAAA,IAEA,EAAA,GAAA,IAIA,EAAA,GAAA,CACA,IAAA,EACA,KAAA,GAGA,IAEA,EAAA,GAAA,KACA,EAAA,QAAA,EAAA,GAAA,KAEA,EAAA,GAAA,KAAA,EAAA,KACA,EAAA,QAAA,EAAA,GAAA,KAAA,EAAA,KAIA,EAAA,iBAAA,SAAA,SAAA,GACA,IAAA,EAAA,EAAA,OAAA,MACA,EAAA,EAAA,cAAA,WAAA,cAAA,MAEA,EAAA,GAAA,KACA,EAAA,QAAA,EAAA,GAAA,KAEA,EAAA,GAAA,KAAA,IACA,EAAA,QAAA,EAAA,GAAA,KAAA,UAMA,QAAA,CACA,UAAA,SAAA,GACA,IAAA,EAAA,EAAA,OAAA,MACA,KAAA,MAAA,QAAA,IAEA,QAAA,SAAA,GAEA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,IAAA,EAAA,SAAA,cACA,eAAA,EAAA,GAAA,KAEA,IACA,EAAA,MAAA,QAAA,WAIA,QAAA,SAAA,GAEA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,IAAA,EAAA,SAAA,cACA,eAAA,EAAA,GAAA,KAEA,IACA,EAAA,MAAA,QAAA,UAKA,4BAAA,SAAA,GAEA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,EAAA,GAAA,QAAA,MACA,WAAA,kBACA,EAAA,GAAA,MAAA,QAAA,YA7FA,QAAA,QAAA","file":"input.js","sourceRoot":"..\\src","sourcesContent":["module.exports = {\n  props: {\n    // Unique id for this interface. Should be added to the lower level \n    // HTML input element if applicable. This ID will be used in the label's\n    // `for` attribute\n    id: {\n      type: String,\n      required: true\n    },\n    // Name of the field\n    name: {\n      type: String,\n      required: true\n    },\n    // The current value. This can either be the default value, the saved database\n    // value or the current state after the user made an edit\n    value: {\n      type: null,\n      default: null\n    },\n    // Type of the field, eg `string`, `hash`, or `array`\n    type: {\n      type: String,\n      required: true\n    },\n    // Max length\n    length: {\n      type: [String, Number],\n      default: null\n    },\n    // If the field is readonly or not\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    // If the field is required or not\n    required: {\n      type: Boolean,\n      default: false\n    },\n    // Field options. A json object based on the interface's meta.json file\n    options: {\n      type: Object,\n      default: () => ({})\n    },\n    // If the item that's currently being edited is new\n    newItem: {\n      type: Boolean,\n      default: false\n    },\n    // The relation of the current field. Will contain information on the related\n    // collection and field(s)\n    relation: {\n      type: Object,\n      default: null\n    },\n    // The other fields in the current edit page\n    fields: {\n      type: Object,\n      default: null\n    },\n    // The values of the other fields on the edit page. Can be used for things like\n    // automatically generating a slug based on another field\n    values: {\n      type: Object,\n      default: null\n    }\n  }\n};\n","<template></template>\n\n<script>\nimport mixin from \"@directus/extension-toolkit/mixins/interface\";\n\nexport default {\n  mixins: [mixin],\n  mounted() {\n    //Hide all conditional-fields-list with field names starting as conditional_\n    const fieldsNode = document.querySelectorAll(\"[data-field]\");\n    this.hideAllConditionalInterface(fieldsNode);\n\n    const { values } = this._props;\n    const conditions = this._props.options.conditions;\n\n    let populatedConditions = {};\n\n    //Get list of conditional fields to check.\n    Object.keys(conditions).forEach((key, index) => {\n      const typeField = document.querySelector(\"[data-field=\" + key + \"]\");\n      let conditional_fields = [];\n      let conditional_values = {};\n\n      // Get list of values to check for.\n      Object.keys(conditions[key]).forEach((keyValues, indexValues) => {\n        let show_fields = [];\n\n        //Get list of fields to show.\n        for (let i = 0; i < conditions[key][keyValues].length; i++) {\n          conditional_fields.push(conditions[key][keyValues][i]);\n          show_fields.push(conditions[key][keyValues][i]);\n        }\n        conditional_values[keyValues] = show_fields;\n      });\n\n      // Create a newly populated conditions with \"all\" for hiding fields and \"show\" for showing fields\n      populatedConditions[key] = {\n        all: conditional_fields,\n        show: conditional_values,\n      };\n\n      if (typeField) {\n        // Show or hide fields if value is already set.\n        if (populatedConditions[key].all) {\n          this.hideAll(populatedConditions[key].all);\n        }\n        if (populatedConditions[key].show[values[key]]) {\n          this.showAll(populatedConditions[key].show[values[key]]);\n        }\n\n        // Add event listener for 'change' event to hide and show fields.\n        typeField.addEventListener(\"change\", (e) => {\n          const value = e.target.value;\n          const field = e.currentTarget.attributes[\"data-field\"].value;\n\n          if (populatedConditions[field].all) {\n            this.hideAll(populatedConditions[field].all);\n          }\n          if (populatedConditions[field].show[value]) {\n            this.showAll(populatedConditions[field].show[value]);\n          }\n        });\n      }\n    });\n  },\n  methods: {\n    emitValue(event) {\n      const value = event.target.value;\n      this.$emit(\"input\", value);\n    },\n    showAll(fieldsNode) {\n      //show all fields\n      for (let i = 0; i < fieldsNode.length; i++) {\n        const field = document.querySelector(\n          \"[data-field=\" + fieldsNode[i] + \"]\"\n        );\n        if (field) {\n          field.style.display = \"block\";\n        }\n      }\n    },\n    hideAll(fieldsNode) {\n      //hide all fields\n      for (let i = 0; i < fieldsNode.length; i++) {\n        const field = document.querySelector(\n          \"[data-field=\" + fieldsNode[i] + \"]\"\n        );\n        if (field) {\n          field.style.display = \"none\";\n        }\n      }\n    },\n\n    hideAllConditionalInterface(fieldsNode) {\n      //Hide all field with name starting with conditional_\n      for (let i = 0; i < fieldsNode.length; i++) {\n        let field = fieldsNode[i].dataset.field;\n        if (field.startsWith(\"conditional_\"))\n          fieldsNode[i].style.display = \"none\";\n      }\n    },\n  },\n};\n</script>\n"]}