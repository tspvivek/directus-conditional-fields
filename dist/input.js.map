{"version":3,"sources":["../node_modules/@directus/extension-toolkit/mixins/interface.js","input.vue"],"names":[],"mappings":";AAAA,OAAA,QAAA,CACA,MAAA,CAIA,GAAA,CACA,KAAA,OACA,UAAA,GAGA,KAAA,CACA,KAAA,OACA,UAAA,GAIA,MAAA,CACA,KAAA,KACA,QAAA,MAGA,KAAA,CACA,KAAA,OACA,UAAA,GAGA,OAAA,CACA,KAAA,CAAA,OAAA,QACA,QAAA,MAGA,SAAA,CACA,KAAA,QACA,SAAA,GAGA,SAAA,CACA,KAAA,QACA,SAAA,GAGA,QAAA,CACA,KAAA,OACA,QAAA,KAAA,KAGA,QAAA,CACA,KAAA,QACA,SAAA,GAIA,SAAA,CACA,KAAA,OACA,QAAA,MAGA,OAAA,CACA,KAAA,OACA,QAAA,MAIA,OAAA,CACA,KAAA,OACA,QAAA;;AC1DA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAFA,IAAA,EAAA,EAAA,QAAA,iDAEA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,IAAA,EAAA,CACA,OAAA,CAAA,EAAA,SACA,QAAA,WAAA,IAAA,EAAA,KAGA,EAAA,SAAA,iBAAA,gBACA,KAAA,4BAAA,GAGA,IAAA,EAAA,KAAA,OAAA,OACA,EAAA,KAAA,OAAA,QAAA,WAGA,EAAA,GAGA,OAAA,KAAA,GAAA,QAAA,SAAA,EAAA,GAEA,IAAA,EAAA,SAAA,cAAA,eAAA,EAAA,KACA,EAAA,GACA,EAAA,GAGA,OAAA,KAAA,EAAA,IAAA,QAAA,SAAA,EAAA,GAKA,IAHA,IAAA,EAAA,GAGA,EAAA,EAAA,EAAA,EAAA,GAAA,GAAA,OAAA,IACA,EAAA,KAAA,EAAA,GAAA,GAAA,IACA,EAAA,KAAA,EAAA,GAAA,GAAA,IAEA,EAAA,GAAA,IAIA,EAAA,GAAA,CAAA,IAAA,EAAA,KAAA,GAEA,IAGA,EAAA,GAAA,KAEA,EAAA,QAAA,EAAA,GAAA,KAEA,EAAA,GAAA,KAAA,EAAA,KAEA,EAAA,QAAA,EAAA,GAAA,KAAA,EAAA,KAIA,EAAA,iBAAA,SAAA,SAAA,GACA,IAAA,EAAA,EAAA,OAAA,MACA,EAAA,EAAA,cAAA,WAAA,cAAA,MAEA,EAAA,GAAA,KAEA,EAAA,QAAA,EAAA,GAAA,KAEA,EAAA,GAAA,KAAA,IAEA,EAAA,QAAA,EAAA,GAAA,KAAA,UAMA,QAAA,CACA,UAAA,SAAA,GACA,IAAA,EAAA,EAAA,OAAA,MACA,KAAA,MAAA,QAAA,IAEA,QAAA,SAAA,GAEA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,IAAA,EAAA,SAAA,cAAA,eAAA,EAAA,GAAA,KACA,IAEA,EAAA,MAAA,QAAA,WAIA,QAAA,SAAA,GAEA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,IAAA,EAAA,SAAA,cAAA,eAAA,EAAA,GAAA,KACA,IAEA,EAAA,MAAA,QAAA,UAKA,4BAAA,SAAA,GAEA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CACA,EAAA,GAAA,QAAA,MACA,WAAA,kBACA,EAAA,GAAA,MAAA,QAAA,YAlGA,QAAA,QAAA","file":"input.js","sourceRoot":"..\\src","sourcesContent":["module.exports = {\n  props: {\n    // Unique id for this interface. Should be added to the lower level \n    // HTML input element if applicable. This ID will be used in the label's\n    // `for` attribute\n    id: {\n      type: String,\n      required: true\n    },\n    // Name of the field\n    name: {\n      type: String,\n      required: true\n    },\n    // The current value. This can either be the default value, the saved database\n    // value or the current state after the user made an edit\n    value: {\n      type: null,\n      default: null\n    },\n    // Type of the field, eg `string`, `hash`, or `array`\n    type: {\n      type: String,\n      required: true\n    },\n    // Max length\n    length: {\n      type: [String, Number],\n      default: null\n    },\n    // If the field is readonly or not\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    // If the field is required or not\n    required: {\n      type: Boolean,\n      default: false\n    },\n    // Field options. A json object based on the interface's meta.json file\n    options: {\n      type: Object,\n      default: () => ({})\n    },\n    // If the item that's currently being edited is new\n    newItem: {\n      type: Boolean,\n      default: false\n    },\n    // The relation of the current field. Will contain information on the related\n    // collection and field(s)\n    relation: {\n      type: Object,\n      default: null\n    },\n    // The other fields in the current edit page\n    fields: {\n      type: Object,\n      default: null\n    },\n    // The values of the other fields on the edit page. Can be used for things like\n    // automatically generating a slug based on another field\n    values: {\n      type: Object,\n      default: null\n    }\n  }\n};\n","<template>\n\n</template>\n\n<script>\n  import mixin from \"@directus/extension-toolkit/mixins/interface\";\n\n  export default {\n    mixins: [mixin],\n    mounted() {\n\t\n\t  //Hide all conditional-fields-list with field names starting as conditional_\n\t  const fieldsNode = document.querySelectorAll('[data-field]');\n\t  this.hideAllConditionalInterface(fieldsNode);\n\t  \n\n      const { values } = this._props\n\t  const conditions = this._props.options.conditions;\t  \n\t  \n\t  \n\t  let populatedConditions = {};\n\n\t  \t//Get list of conditional fields to check.\n        Object.keys(conditions).forEach(( key, index ) => {\n\n\t\t\tconst typeField = document.querySelector('[data-field='+key+']');\t\t\t\n\t\t\tlet conditional_fields=[];\t\t\t\n\t\t\tlet conditional_values={};\n\t\t\t\n\t\t\t// Get list of values to check for.\n\t\t\tObject.keys(conditions[key]).forEach(( keyValues, indexValues ) => {\t\n\t\t\t\t\n\t\t\t\tlet show_fields=[];\t\t\t\t\n\t\t\t\t\n\t\t\t\t//Get list of fields to show.\n\t\t\t\tfor (let i = 0; i < conditions[key][keyValues].length; i++) {\n\t\t\t\t\tconditional_fields.push(conditions[key][keyValues][i]);\n\t\t\t\t\tshow_fields.push(conditions[key][keyValues][i]);\n\t\t\t\t}\n\t\t\t\tconditional_values[keyValues]=show_fields;\n\t\t\t});\n\t\t\t\n\t\t\t// Create a newly populated conditions with \"all\" for hiding fields and \"show\" for showing fields\n\t\t\tpopulatedConditions[key]={\"all\":conditional_fields, \"show\": conditional_values};\t\t\t\n\t\t\t\n\t\t\tif (typeField) {\n\t\t\t\n\t\t\t\t  // Show or hide fields if value is already set.\n\t\t\t\t  if(populatedConditions[key].all)\n\t\t\t\t  {\n\t\t\t\t\tthis.hideAll(populatedConditions[key].all);\n\t\t\t\t  }\n\t\t\t\t  if(populatedConditions[key].show[values[key]])\n\t\t\t\t  {\n\t\t\t\t\tthis.showAll(populatedConditions[key].show[values[key]]);\n\t\t\t\t  }\t\t\t\t\n\t\t\t    \n\t\t\t\t// Add event listener for 'change' event to hide and show fields.\n\t\t\t\ttypeField.addEventListener('change', (e) => {\n\t\t\t\t  const value = e.target.value\n\t\t\t\t  const field = e.currentTarget.attributes['data-field'].value;\n\t\t\t\t  \n\t\t\t\t  if(populatedConditions[field].all)\n\t\t\t\t  {\n\t\t\t\t\tthis.hideAll(populatedConditions[field].all);\n\t\t\t\t  }\n\t\t\t\t  if(populatedConditions[field].show[value])\n\t\t\t\t  {\n\t\t\t\t\tthis.showAll(populatedConditions[field].show[value]);\n\t\t\t\t  }\n\t\t\t\t})\n\t\t\t} \n        });\t\n    },\n    methods: {\n      emitValue(event) {\n        const value = event.target.value;\n        this.$emit(\"input\", value);\n      },\n      showAll(fieldsNode) {\n\t\t//show all fields\n        for (let i = 0; i < fieldsNode.length; i++) {\t\t\n\t\t  const field = document.querySelector('[data-field='+fieldsNode[i]+']');\t\n\t\t  if(field)\t\t  \n\t\t  {\n\t\t  field.style.display = 'block';\n\t\t  }\n        }\n      },\n      hideAll(fieldsNode) {\n\t  \t//hide all fields\n        for (let i = 0; i < fieldsNode.length; i++) {\t\t\n\t\t  const field = document.querySelector('[data-field='+fieldsNode[i]+']');\n\t\t  if(field)\n\t\t  {\n\t\t\tfield.style.display = 'none';\n\t\t  }\n        }\n      },\n\t  \n      hideAllConditionalInterface(fieldsNode) {\n\t  \t//Hide all field with name starting with conditional_\n        for (let i = 0; i < fieldsNode.length; i++) {\n          let field = fieldsNode[i].dataset.field\n          if (field.startsWith('conditional_'))\n            fieldsNode[i].style.display = 'none'\n        }\n      }\t  \n\t  \n    }\n  }\n</script>\n\n<style lang=\"scss\" scoped>\n.interface-json {\n\tposition: relative;\n\t::v-deep {\n\t\t.CodeMirror-scroll {\n\t\t\tmin-height: var(--form-column-width);\n\t\t\tmax-height: var(--form-row-max-height);\n\t\t}\n\t}\n}\nbutton {\n\tposition: absolute;\n\ttop: 10px;\n\tright: 10px;\n\tuser-select: none;\n\tcolor: var(--blue-grey-300);\n\tcursor: pointer;\n\ttransition: color var(--fast) var(--transition-out);\n\tz-index: 10;\n\t&:hover {\n\t\ttransition: none;\n\t\tcolor: var(--blue-grey-600);\n\t}\n}\n</style>\n"]}